// Mocks generated by Mockito 5.4.2 from annotations
// in app_store/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:app_store/src/snapd/snap_launcher.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:snapcraft_launcher/snapcraft_launcher.dart' as _i3;
import 'package:snapd/snapd.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSnap_0 extends _i1.SmartFake implements _i2.Snap {
  _FakeSnap_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePrivilegedDesktopLauncher_1 extends _i1.SmartFake
    implements _i3.PrivilegedDesktopLauncher {
  _FakePrivilegedDesktopLauncher_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SnapLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnapLauncher extends _i1.Mock implements _i4.SnapLauncher {
  MockSnapLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Snap get snap => (super.noSuchMethod(
        Invocation.getter(#snap),
        returnValue: _FakeSnap_0(
          this,
          Invocation.getter(#snap),
        ),
      ) as _i2.Snap);
  @override
  _i3.PrivilegedDesktopLauncher get launcher => (super.noSuchMethod(
        Invocation.getter(#launcher),
        returnValue: _FakePrivilegedDesktopLauncher_1(
          this,
          Invocation.getter(#launcher),
        ),
      ) as _i3.PrivilegedDesktopLauncher);
  @override
  bool get isLaunchable => (super.noSuchMethod(
        Invocation.getter(#isLaunchable),
        returnValue: false,
      ) as bool);
  @override
  void open() => super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
